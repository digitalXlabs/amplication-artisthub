/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Artist as PrismaArtist,
  Artwork as PrismaArtwork,
  Project as PrismaProject,
} from "@prisma/client";

import { LocalStorageService } from "src/storage/providers/local/local.storage.service";
import { InputJsonValue } from "src/types";
import { FileDownload, FileUpload } from "src/storage/base/storage.types";
import { LocalStorageFile } from "src/storage/providers/local/local.storage.types";

export class ArtistServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly localStorageService: LocalStorageService
  ) {}

  async count(args: Omit<Prisma.ArtistCountArgs, "select">): Promise<number> {
    return this.prisma.artist.count(args);
  }

  async artists(args: Prisma.ArtistFindManyArgs): Promise<PrismaArtist[]> {
    return this.prisma.artist.findMany(args);
  }
  async artist(
    args: Prisma.ArtistFindUniqueArgs
  ): Promise<PrismaArtist | null> {
    return this.prisma.artist.findUnique(args);
  }
  async createArtist(args: Prisma.ArtistCreateArgs): Promise<PrismaArtist> {
    return this.prisma.artist.create(args);
  }
  async updateArtist(args: Prisma.ArtistUpdateArgs): Promise<PrismaArtist> {
    return this.prisma.artist.update(args);
  }
  async deleteArtist(args: Prisma.ArtistDeleteArgs): Promise<PrismaArtist> {
    return this.prisma.artist.delete(args);
  }

  async uploadBioPdf<T extends Prisma.ArtistFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArtistFindUniqueArgs>,
    file: FileUpload
  ): Promise<PrismaArtist> {
    file.filename = `profilePicture-${args.where.id}.${file.filename
      .split(".")
      .pop()}`;
    const containerPath = "bioPdf";
    const bioPdf = await this.localStorageService.uploadFile(
      file,
      [],
      1000000,
      containerPath
    );

    return await this.prisma.artist.update({
      where: args.where,

      data: {
        bioPdf: bioPdf as InputJsonValue,
      },
    });
  }

  async downloadBioPdf<T extends Prisma.ArtistFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArtistFindUniqueArgs>
  ): Promise<FileDownload> {
    const { bioPdf } = await this.prisma.artist.findUniqueOrThrow({
      where: args.where,
    });

    return await this.localStorageService.downloadFile(
      bioPdf as unknown as LocalStorageFile
    );
  }

  async deleteBioPdf<T extends Prisma.ArtistFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArtistFindUniqueArgs>
  ): Promise<PrismaArtist> {
    const { bioPdf } = await this.prisma.artist.findUniqueOrThrow({
      where: args.where,
    });

    await this.localStorageService.deleteFile(
      bioPdf as unknown as LocalStorageFile
    );

    return await this.prisma.artist.update({
      where: args.where,

      data: {
        bioPdf: Prisma.DbNull,
      },
    });
  }

  async uploadCvPdf<T extends Prisma.ArtistFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArtistFindUniqueArgs>,
    file: FileUpload
  ): Promise<PrismaArtist> {
    file.filename = `profilePicture-${args.where.id}.${file.filename
      .split(".")
      .pop()}`;
    const containerPath = "cvPdf";
    const cvPdf = await this.localStorageService.uploadFile(
      file,
      [],
      1000000,
      containerPath
    );

    return await this.prisma.artist.update({
      where: args.where,

      data: {
        cvPdf: cvPdf as InputJsonValue,
      },
    });
  }

  async downloadCvPdf<T extends Prisma.ArtistFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArtistFindUniqueArgs>
  ): Promise<FileDownload> {
    const { cvPdf } = await this.prisma.artist.findUniqueOrThrow({
      where: args.where,
    });

    return await this.localStorageService.downloadFile(
      cvPdf as unknown as LocalStorageFile
    );
  }

  async deleteCvPdf<T extends Prisma.ArtistFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArtistFindUniqueArgs>
  ): Promise<PrismaArtist> {
    const { cvPdf } = await this.prisma.artist.findUniqueOrThrow({
      where: args.where,
    });

    await this.localStorageService.deleteFile(
      cvPdf as unknown as LocalStorageFile
    );

    return await this.prisma.artist.update({
      where: args.where,

      data: {
        cvPdf: Prisma.DbNull,
      },
    });
  }

  async findArtworks(
    parentId: string,
    args: Prisma.ArtworkFindManyArgs
  ): Promise<PrismaArtwork[]> {
    return this.prisma.artist
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .artworks(args);
  }

  async findProjects(
    parentId: string,
    args: Prisma.ProjectFindManyArgs
  ): Promise<PrismaProject[]> {
    return this.prisma.artist
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .projects(args);
  }
}
