/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Artwork as PrismaArtwork,
  Submission as PrismaSubmission,
  Artist as PrismaArtist,
} from "@prisma/client";

import { LocalStorageService } from "src/storage/providers/local/local.storage.service";
import { InputJsonValue } from "src/types";
import { FileDownload, FileUpload } from "src/storage/base/storage.types";
import { LocalStorageFile } from "src/storage/providers/local/local.storage.types";

export class ArtworkServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly localStorageService: LocalStorageService
  ) {}

  async count(args: Omit<Prisma.ArtworkCountArgs, "select">): Promise<number> {
    return this.prisma.artwork.count(args);
  }

  async artworks(args: Prisma.ArtworkFindManyArgs): Promise<PrismaArtwork[]> {
    return this.prisma.artwork.findMany(args);
  }
  async artwork(
    args: Prisma.ArtworkFindUniqueArgs
  ): Promise<PrismaArtwork | null> {
    return this.prisma.artwork.findUnique(args);
  }
  async createArtwork(args: Prisma.ArtworkCreateArgs): Promise<PrismaArtwork> {
    return this.prisma.artwork.create(args);
  }
  async updateArtwork(args: Prisma.ArtworkUpdateArgs): Promise<PrismaArtwork> {
    return this.prisma.artwork.update(args);
  }
  async deleteArtwork(args: Prisma.ArtworkDeleteArgs): Promise<PrismaArtwork> {
    return this.prisma.artwork.delete(args);
  }

  async uploadFile<T extends Prisma.ArtworkFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArtworkFindUniqueArgs>,
    file: FileUpload
  ): Promise<PrismaArtwork> {
    file.filename = `profilePicture-${args.where.id}.${file.filename
      .split(".")
      .pop()}`;
    const containerPath = "file";
    const file = await this.localStorageService.uploadFile(
      file,
      [],
      1000000,
      containerPath
    );

    return await this.prisma.artwork.update({
      where: args.where,

      data: {
        file: file as InputJsonValue,
      },
    });
  }

  async downloadFile<T extends Prisma.ArtworkFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArtworkFindUniqueArgs>
  ): Promise<FileDownload> {
    const { file } = await this.prisma.artwork.findUniqueOrThrow({
      where: args.where,
    });

    return await this.localStorageService.downloadFile(
      file as unknown as LocalStorageFile
    );
  }

  async deleteFile<T extends Prisma.ArtworkFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArtworkFindUniqueArgs>
  ): Promise<PrismaArtwork> {
    const { file } = await this.prisma.artwork.findUniqueOrThrow({
      where: args.where,
    });

    await this.localStorageService.deleteFile(
      file as unknown as LocalStorageFile
    );

    return await this.prisma.artwork.update({
      where: args.where,

      data: {
        file: Prisma.DbNull,
      },
    });
  }

  async findSubmissions(
    parentId: string,
    args: Prisma.SubmissionFindManyArgs
  ): Promise<PrismaSubmission[]> {
    return this.prisma.artwork
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .submissions(args);
  }

  async getArtist(parentId: string): Promise<PrismaArtist | null> {
    return this.prisma.artwork
      .findUnique({
        where: { id: parentId },
      })
      .artist();
  }
}
