/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { SubmissionService } from "../submission.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SubmissionCreateInput } from "./SubmissionCreateInput";
import { Submission } from "./Submission";
import { SubmissionFindManyArgs } from "./SubmissionFindManyArgs";
import { SubmissionWhereUniqueInput } from "./SubmissionWhereUniqueInput";
import { SubmissionUpdateInput } from "./SubmissionUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class SubmissionControllerBase {
  constructor(
    protected readonly service: SubmissionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Submission })
  @nestAccessControl.UseRoles({
    resource: "Submission",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createSubmission(
    @common.Body() data: SubmissionCreateInput
  ): Promise<Submission> {
    return await this.service.createSubmission({
      data: {
        ...data,

        artwork: data.artwork
          ? {
              connect: data.artwork,
            }
          : undefined,

        organization: data.organization
          ? {
              connect: data.organization,
            }
          : undefined,
      },
      select: {
        artwork: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        deadline: true,
        fee: true,
        id: true,

        organization: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Submission] })
  @ApiNestedQuery(SubmissionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Submission",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async submissions(@common.Req() request: Request): Promise<Submission[]> {
    const args = plainToClass(SubmissionFindManyArgs, request.query);
    return this.service.submissions({
      ...args,
      select: {
        artwork: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        deadline: true,
        fee: true,
        id: true,

        organization: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Submission })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Submission",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async submission(
    @common.Param() params: SubmissionWhereUniqueInput
  ): Promise<Submission | null> {
    const result = await this.service.submission({
      where: params,
      select: {
        artwork: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        deadline: true,
        fee: true,
        id: true,

        organization: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Submission })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Submission",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateSubmission(
    @common.Param() params: SubmissionWhereUniqueInput,
    @common.Body() data: SubmissionUpdateInput
  ): Promise<Submission | null> {
    try {
      return await this.service.updateSubmission({
        where: params,
        data: {
          ...data,

          artwork: data.artwork
            ? {
                connect: data.artwork,
              }
            : undefined,

          organization: data.organization
            ? {
                connect: data.organization,
              }
            : undefined,
        },
        select: {
          artwork: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          deadline: true,
          fee: true,
          id: true,

          organization: {
            select: {
              id: true,
            },
          },

          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Submission })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Submission",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteSubmission(
    @common.Param() params: SubmissionWhereUniqueInput
  ): Promise<Submission | null> {
    try {
      return await this.service.deleteSubmission({
        where: params,
        select: {
          artwork: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          deadline: true,
          fee: true,
          id: true,

          organization: {
            select: {
              id: true,
            },
          },

          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
